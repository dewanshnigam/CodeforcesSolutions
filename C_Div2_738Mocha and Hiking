// https://codeforces.com/contest/1559/problem/C

import java.util.*;
import java.io.*;

import static java.lang.Math.max;

public class C
{
    static InputReader in=new InputReader(System.in);
    static OutputWriter out=new OutputWriter(System.out);
    static StringBuilder sb=new StringBuilder();
    static long MOD = (long)(998244353);
    static int n;
    static int a[];
    static boolean dp[][];

    // Main Class Starts Here
    public static void main(String args[])throws IOException
    {
        // Write your code.

        int t = in();
        while(t-->0) {
            n = in();
            a = an(n);
            if(n == 1){
                if(a[0] == 0)
                    app(1+" "+2+"\n");
                else
                    app(2+" "+1+"\n");
            }
            else{
                if(a[0] == 1){
                    app((n+1)+" ");
                    for(int i = 1; i <= n; i++)
                        app(i+" ");


                    app("\n");
                }
                else{
                    if(a[n-1] == 0){
                        for(int i = 1; i <= n+1; i++)
                            app(i+" ");
                        app("\n");
                    }
                    else{
                        // a[0] = 0 and a[n-1] = 1.
                        for(int i = 0; i < n ;i++){
                            if(a[i] == 0){
                                app((i+1)+" ");
                            }
                            else{
                                app((n+1)+" ");
                                for(int j = i; j < n; j++)
                                    app((j+1)+" ");
                                break;
                            }
                        }
                        app("\n");
                    }
                }
            }
        }
        out.printLine(sb);
        out.close();
    }

    public static boolean isGoodArray(int a[], int n, int sum){

        dp = new boolean[n+1][sum+1];
        dp[0][0] = true;
        // dp[i][j] = true means if you take first i elements, you can have sum 'j'
        // dp[i][j] = dp[i-1][j] || dp[i][j-a[i]];
        for(int i = 1; i <= n; i++){
            for(int j = 0 ; j <= sum ;j++){
                dp[i][j] = dp[i][j] || dp[i-1][j];
                if(j >= a[i-1]){
                    dp[i][j] = dp[i][j] || dp[i-1][j-a[i-1]];
                }
            }
        }
        return dp[n][sum/2];
    }


    public static String atsi(int a[]){
        return Arrays.toString(a);
    }

    public static String atsl(long a[]){
        return Arrays.toString(a);
    }

    public static int[] an(int n) {
        int ar[]=new int[n];
        for(int i=0;i<n;i++)
            ar[i]=in();
        return ar;
    }

    public static long[] lan(int n) {
        long ar[]=new long[n];
        for(int i=0;i<n;i++)
            ar[i]=lin();
        return ar;
    }

    public static String atos(Object ar[]) {
        return Arrays.toString(ar);
    }

    public static int in() {
        return in.readInt();
    }

    public static long lin() {
        return in.readLong();
    }

    public static String sn() {
        return in.readString();
    }

    public static void prln(Object o) {
        out.printLine(o);
    }

    public static void prn(Object o) {
        out.print(o);
    }

    public static void app(Object o) {
        sb.append(o);
    }

    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1)
                throw new InputMismatchException();
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }

        public int readInt() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public long readLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }

        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public String next() {
            return readString();
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }

    static class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object...objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void printLine(Object...objects) {
            print(objects);
            writer.println();
        }

        public void close() {
            writer.close();
        }
    }
}
